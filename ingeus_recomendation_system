final_features = [ 'avginterventiontotalduration',
#  'areaoffocus_attending_job_interviews',
#  'areaoffocus_caring_responsibilities',
#  'areaoffocus_communication_skills',
#  'areaoffocus_completing_cv_&_job_applications',
#  'areaoffocus_completing_cv_and_job_applications',
#  'areaoffocus_confidence',
#  'areaoffocus_criminal_record',
#  'areaoffocus_digital_hardware_&_connectivity',
#  'areaoffocus_digital_skills',
#  'areaoffocus_finance',
#  'areaoffocus_housing',
#  'areaoffocus_job_goal',
#  'areaoffocus_job_search',
#  'areaoffocus_learning_capability',
#  'areaoffocus_literacy_&_numeracy',
#  'areaoffocus_literacy_and_numeracy',
#  'areaoffocus_mental_wellbeing',
#  'areaoffocus_motivation',
#  'areaoffocus_photo_identification',
#  'areaoffocus_physical_capability',
#  'areaoffocus_qualifications',
#  'areaoffocus_qualifications_incl_industry',
#  'areaoffocus_qualifications_progression',
#  'areaoffocus_social_&_support_networks',
#  'areaoffocus_transferable_skills',
#  'areaoffocus_transport',
#  'level_level_1',
#  'level_level_2',
#  'level_level_3',
#  'level_level_4',
#  'level_level_5',
#  'level_level_6',
 'category_access_external_digital_support_service',
 'category_access_external_hardware_support_service',
 'category_access_external_mental_wellbeing_service',
 'category_access_external_money_management_support_service',
 'category_access_external_physical_health_support_service',
 'category_access_external_self_employment_support_service',
 'category_access_external_support_network',
 'category_access_external_transferrable_skills_service',
 'category_apply_for_jobs',
 'category_apply_for_photo_id',
 'category_apply_for_courses_with_the_relevant_qualifications',
 'category_attend_external_care_support_service',
 'category_attend_external_confidence_building_service',
 'category_attend_external_esol_course',
 'category_attend_external_english_course',
 'category_attend_external_ex-offender_support_service',
 'category_attend_external_functional_skills_service',
 'category_attend_external_housing_support_service',
 'category_attend_external_interview_support_service',
 'category_attend_external_job_goal_session',
 'category_attend_external_job_search_service',
 'category_attend_external_job_searching_event',
 'category_attend_external_motivation_service',
 'category_attend_external_self_employment_support_service',
 'category_attend_a_121_with_the_wellbeing_officer',
 'category_attend_a_confidence_building_session',
 'category_attend_a_group_session_on_cv_building',
 'category_attend_a_group_session_on_interview_preparation',
 'category_attend_an_internal_wellbeing_workshop',
 'category_attend_an_interview_skills_workshop',
 'category_attend_the_journey_to_employment_workshop',
 'category_bring_children_to_appointments',
 'category_bring_evidence_of_travel_costs_to_appointment_to_claim_expenses',
 'category_complete_external_qualification',
 'category_complete_a_digital_audit',
 'category_complete_a_mental_wellbeing_assessment',
 'category_complete_a_mock_interview_with_an_advisor',
 'category_complete_confidence_building_sessions_on_iworks',
 'category_complete_debt_management_course_on_iworks',
 'category_complete_iworks_digital_skills_sessions',
 'category_create_a_cv_tailored_to_the_role_you_are_applying_for',
 'category_create_multiple_cvs_relevant_to_the_sectors_being_applied_for',
 'category_gather_work_and_education_history',
 'category_identify_esol_courses_available',
 'category_identify_benefits_of_increasing_physical_activity',
 'category_identify_immediate_support_available_to_develop_your_understanding_of_english_family',
 'category_identify_impact_on_job_goals_and_how_these_can_be_overcome',
 'category_identify_nurseries_offering_funded_childcare',
 'category_identify_qualifications_gaps',
 'category_identify_qualifications_needed_to_fill_gaps',
 "category_identify_qualifications_that_could_be_gained_via_iwork's",
 'category_identify_specialist_intervention_services_relating_to_physical_activity',
 'category_identifying_areas_for_improving_reading_and_writing_with_iworks',
 'category_identifying_areas_for_improving_reading_and_writing_within_local_community',
 'category_plan_travel_routes',
 'category_plan_travel_routes_for_attending_job_interviews/work_locations',
 'category_provide_evidence_of_qualifications',
 'category_research_the_role_being_applied_for',
 'category_update_cv_with_new_qualifications_gained',
 'category_use_iworks_cv_checker_to_assess_the_quality_of_your_cv',
 'category_use_iworks_interview_360_tool_to_prepare_for_a_job_interview',
 'category_use_iworks_to_build_a_cv/curriculum_vitae',
 'category_use_the_job_search_function_in_iworks_to_shortlist_roles_to_apply_for'
]

X_train_selected = X_train[final_features]

# Create new boolean, numerical, and categorical column lists based on the selected features
selected_bool_cols = [col for col in BOOL_COLS if col in final_features]
selected_numerical_cols = [col for col in NUMERICAL_COLS if col in final_features]
selected_categorical_cols = [col for col in CATEGORICAL_COLS if col in final_features]

# Create a new preprocessor based on the selected features
selected_preprocessor = ColumnTransformer(transformers=[
    ('bool', bool_transformer, selected_bool_cols),
    ('numerical', numerical_transformer, selected_numerical_cols),
    ('categorical', categorical_transformer, selected_categorical_cols)
])


#classifier = GradientBoostingClassifier(random_state=42,learning_rate=0.1,max_depth=3,n_estimators=200)

classifier = XGBClassifier(random_state=42, learning_rate=0.1, max_depth=5, n_estimators =200)
# Create a new pipeline with the selected preprocessor and classifier
selected_pipeline = Pipeline(steps=[
    ('preprocessor', selected_preprocessor),
    ('classifier', classifier)
])

# Fit the new pipeline
selected_pipeline.fit(X_train_selected, y_train)

# Make predictions on the balanced test data
X_test = test_pdf_balanced.drop('job_out_come', axis=1)
X_test_selected = X_test[final_features]
y_test = test_pdf_balanced['job_out_come']
y_pred = selected_pipeline.predict(X_test_selected)
y_pred_proba = selected_pipeline.predict_proba(X_test_selected)[:, 1]

# Compute metrics
test_auc = roc_auc_score(y_test, y_pred_proba)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
    
res_dict = {
  'Test AUC': test_auc,
  'Test Precision': precision,
  'Test Recall': recall,
  'Test F1': f1
}

print(res_dict)
