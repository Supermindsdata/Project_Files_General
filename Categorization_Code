def load_and_preprocess_data(file_path, column_name):
    df = pd.read_excel(file_path)
    # Basic text preprocessing
    df[column_name] = df[column_name].str.lower().str.strip()
    return df


def load_and_preprocess_data(file_path, column_name):
    df = pd.read_excel(file_path)
    # Basic text preprocessing
    df[column_name] = df[column_name].str.lower().str.strip()
    return df

def load_keyword_rules(excel_path):
    excel_data = pd.ExcelFile(excel_path)
    interventions_df = pd.read_excel(excel_data, sheet_name='Interventions')
    mapping_rules = {}
    for index, row in interventions_df.iterrows():
        area_of_focus = row['Area of Focus']
        mapping_rules[area_of_focus] = {}
        for level in range(1, 6):
            level_key = f"Level {level}"
            keyword_key = f"Level {level} keywords"
            if pd.notna(row[level_key]) and pd.notna(row[keyword_key]):
                mapping_rules[area_of_focus][level_key] = {
                    'description': row[level_key],
                    'keywords': row[keyword_key]
                }
    return mapping_rules

def match_keywords(text, keyword_pattern):
    # Split the pattern by slashes to handle the "two or more" rule
    slash_split = keyword_pattern.split('/')
    if len(slash_split) > 1:
        # We need at least two matches from the split parts
        matches = [any(re.findall(f"\\b{part}\\b", text)) for part in slash_split]
        return sum(matches) >= 2
    else:
        # Handle the parentheses grouping
        paren_split = re.findall(r'\((.*?)\)', keyword_pattern)
        if paren_split:
            return any(re.search(r'\b{}\b'.format(re.escape(word)), text) for word in paren_split)
        else:
            # Direct match without special rules
            return re.search(r'\b{}\b'.format(re.escape(keyword_pattern)), text)

def assign_categories(df, mapping_rules, column_name):
    df['Area of Focus'] = None
    df['Level'] = None
    df['Category'] = None

    for idx, row in df.iterrows():
        text = row[column_name]
        for area, levels in mapping_rules.items():
            for level, details in levels.items():
                if match_keywords(text, details['keywords']):
                    df.at[idx, 'Area of Focus'] = area
                    df.at[idx, 'Level'] = level
                    df.at[idx, 'Category'] = details['description']
                    break
            if df.at[idx, 'Area of Focus'] is not None:
                break

    return df

# Path to your Excel file containing the DataFrame
data_path = 'path_to_your_data.xlsx'

# Load and preprocess your DataFrame
df = load_and_preprocess_data(data_path, 'InterventionDetailsAndObjectivesDescription')

# Load mapping rules from another Excel sheet
rules_path = 'path_to_rules_file.xlsx'
mapping_rules = load_keyword_rules(rules_path)

# Apply the matching and assign categories
df = assign_categories(df, mapping_rules, 'InterventionDetailsAndObjectivesDescription')

# Print the result to check
print(df[['InterventionDetailsAndObjectivesDescription', 'Area of Focus', 'Level', 'Category']])

------------------------------------ Displaying keywords considered for mapping in final dataframe -----------------

def match_keywords(text, keyword_pattern):
    # Split the pattern by slashes to handle the "two or more" rule
    slash_split = keyword_pattern.split('/')
    found_keywords = []
    if len(slash_split) > 1:
        # We need at least two matches from the split parts
        matches = [(part, re.findall(f"\\b{part}\\b", text)) for part in slash_split]
        match_counts = sum([bool(match[1]) for match in matches])
        if match_counts >= 2:
            found_keywords = [match[0] for match in matches if match[1]]
    else:
        # Handle the parentheses grouping
        paren_split = re.findall(r'\((.*?)\)', keyword_pattern)
        if paren_split:
            for word in paren_split:
                if re.search(r'\b{}\b'.format(re.escape(word)), text):
                    found_keywords.append(word)
        else:
            # Direct match without special rules
            if re.search(r'\b{}\b'.format(re.escape(keyword_pattern)), text):
                found_keywords.append(keyword_pattern)

    return found_keywords if found_keywords else None

def assign_categories(df, mapping_rules, column_name):
    df['Area of Focus'] = None
    df['Level'] = None
    df['Category'] = None
    df['Matching Keywords'] = None  # New column to store the matched keywords

    for idx, row in df.iterrows():
        text = row[column_name].lower()  # Ensure the text is in lower case for matching
        for area, levels in mapping_rules.items():
            for level, details in levels.items():
                matching_keywords = match_keywords(text, details['keywords'])
                if matching_keywords:
                    df.at[idx, 'Area of Focus'] = area
                    df.at[idx, 'Level'] = level
                    df.at[idx, 'Category'] = details['description']
                    df.at[idx, 'Matching Keywords'] = ", ".join(matching_keywords)  # Join list of keywords into a string
                    break
            if df.at[idx, 'Area of Focus'] is not None:
                break

    return df
---------------------------------------- Using multiple columns for mapping --------------------------------

def concatenate_columns(df, columns):
    # Creating a new column 'ConcatenatedText' that merges the text from the specified columns
    df['ConcatenatedText'] = df[columns].apply(lambda x: ' '.join(x.dropna().astype(str)).lower(), axis=1)
    return df

def match_keywords(text, keyword_pattern):
    slash_split = keyword_pattern.split('/')
    found_keywords = []
    if len(slash_split) > 1:
        matches = [(part, re.findall(f"\\b{part}\\b", text)) for part in slash_split]
        match_counts = sum([bool(match[1]) for match in matches])
        if match_counts >= 2:
            found_keywords = [match[0] for match in matches if match[1]]
    else:
        paren_split = re.findall(r'\((.*?)\)', keyword_pattern)
        if paren_split:
            for word in paren_split:
                if re.search(r'\b{}\b'.format(re.escape(word)), text):
                    found_keywords.append(word)
        else:
            if re.search(r'\b{}\b'.format(re.escape(keyword_pattern)), text):
                found_keywords.append(keyword_pattern)

    return found_keywords if found_keywords else None

def assign_categories(df, mapping_rules, text_column='ConcatenatedText'):
    df['Area of Focus'] = None
    df['Level'] = None
    df['Category'] = None
    df['Matching Keywords'] = None

    for idx, row in df.iterrows():
        text = row[text_column]  # Use the concatenated text for keyword matching
        for area, levels in mapping_rules.items():
            for level, details in levels.items():
                matching_keywords = match_keywords(text, details['keywords'])
                if matching_keywords:
                    df.at[idx, 'Area of Focus'] = area
                    df.at[idx, 'Level'] = level
                    df.at[idx, 'Category'] = details['description']
                    df.at[idx, 'Matching Keywords'] = ", ".join(matching_keywords)
                    break
            if df.at[idx, 'Area of Focus'] is not None:
                break

    return df

# Assuming you have already loaded your DataFrame `df`
columns_to_use = ['InterventionTypeDescription', 'InterventionDetailsAndObjectivesDescription']

# Concatenate the specified columns into a single column for processing
df = concatenate_columns(df, columns_to_use)

# Load the keyword mapping rules (assuming this has been already defined)
mapping_rules = load_keyword_rules('path_to_your_rules_file.xlsx')

# Apply the keyword matching and category assignment
df = assign_categories(df, mapping_rules)

# Print the result to verify the output
print(df[['ConcatenatedText', 'Area of Focus', 'Level', 'Category', 'Matching Keywords']])

################# Bert tokenizor integration #########################

from transformers import BertTokenizer, BertModel
import torch
import pandas as pd

# Load tokenizer and model
tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')
model = BertModel.from_pretrained('bert-base-uncased')

def add_bert_features(df, text_column):
    # This function assumes that CUDA is available. If not, remove '.to("cuda")' below
    model.to("cuda")
    
    # Function to get BERT features for a single text
    def get_bert_features(text):
        inputs = tokenizer(text, return_tensors="pt", padding=True, truncation=True, max_length=512)
        # Move tensors to the same device as the model
        inputs = {key: value.to("cuda") for key, value in inputs.items()}
        with torch.no_grad():  # Ensure no gradients are calculated
            outputs = model(**inputs)
        # Retrieve the last hidden states and move to CPU
        features = outputs.last_hidden_state[:, 0, :].cpu().numpy()  # Get the embeddings of the [CLS] token
        return features

    # Apply the function to each item in the column and store the results as a new column
    df['BERT_Features'] = df[text_column].apply(lambda x: get_bert_features(x))

    return df

# Assuming you have already loaded your DataFrame `df` and concatenated the columns
# Now add BERT features
df = add_bert_features(df, 'ConcatenatedText')

# Print the result to verify the output
print(df[['ConcatenatedText', 'BERT_Features']])

############## Using Spacy for cleaning and Bert for embedding #############

# Load spaCy and BERT

import spacy
from transformers import BertTokenizer, BertModel
import torch
import pandas as pd

# Load spaCy NLP model
nlp = spacy.load('en_core_web_sm')

# Load BERT tokenizer and model
tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')
model = BertModel.from_pretrained('bert-base-uncased')
model.eval()  # Set the model to evaluation mode if not training

# Define Preprocessing and Feature Extraction Functions

def preprocess_text(text):
    """ Use spaCy to clean and lemmatize text. """
    doc = nlp(text)
    cleaned_text = ' '.join(token.lemma_ for token in doc if not token.is_stop and not token.is_punct and token.text not in ['nonrelevant'])
    return cleaned_text

def get_bert_features(text):
    """ Extract BERT features for a single text input. """
    inputs = tokenizer(text, return_tensors="pt", padding=True, truncation=True, max_length=512)
    with torch.no_grad():
        outputs = model(**inputs)
    features = outputs.last_hidden_state[:, 0, :].squeeze().numpy()  # Get the embeddings of the [CLS] token
    return features

def add_features_to_df(df, text_column):
    """ Preprocess text and then add BERT features to the DataFrame. """
    df['CleanedText'] = df[text_column].apply(preprocess_text)
    df['BERT_Features'] = df['CleanedText'].apply(get_bert_features)
    return df

# Apply the Integrated Processing to DataFrame

# Assuming 'ConcatenatedText' is already in your DataFrame
df = add_features_to_df(df, 'ConcatenatedText')

# Print the result to verify outputs
print(df[['ConcatenatedText', 'CleanedText', 'BERT_Features']])





############## machine learning model to predict categories with bert embeddings and map area of interest ###########


def train_and_predict_with_bert_features(df, feature_column, target_column, mapping_rules):
    # Filter out rows where the category is not yet mapped
    mapped_df = df.dropna(subset=[target_column, feature_column])

    # Prepare the features and labels
    X = np.stack(mapped_df[feature_column].values)  # Assuming BERT features are already in a suitable numpy array format
    y = mapped_df[target_column].values

    # Split the data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Initialize and train the classifier
    clf = RandomForestClassifier(n_estimators=100, random_state=42)
    clf.fit(X_train, y_train)

    # Predict on the test set
    y_pred = clf.predict(X_test)

    # Evaluate the model
    print("Accuracy on test set:", accuracy_score(y_test, y_pred))
    print("Classification Report:\n", classification_report(y_test, y_pred))

    # Predicting the unmapped categories in the original DataFrame
    unmapped_index = df[df[target_column].isnull()].index
    unmapped_features = np.stack(df.loc[unmapped_index, feature_column].values)
    unmapped_predictions = clf.predict(unmapped_features)
    df.loc[unmapped_index, target_column] = unmapped_predictions

    # Map "Area of Focus" based on the predicted "Category"
    df['Area of Focus'] = df[target_column].apply(lambda x: mapping_rules.get(x, {}).get('Area of Focus', 'Unknown'))

    return df

# Assume 'df' is your DataFrame and 'BERT_Features' are stored from previous steps
# 'Category' is the target column where some entries are already mapped

df = train_and_predict_with_bert_features(df, 'BERT_Features', 'Category', mapping_rules)

# Now df has the previously unmapped categories filled in and areas of focus mapped
print(df[['ConcatenatedText', 'Category', 'Area of Focus']])


####################################updated match keywords function to handle lower upper text ##############################


import re

def match_keywords(text, keyword_pattern):
    # Normalize the text to lower case if you're not using case-insensitive matching
    text = text.lower()

    # Prepare regex for matching plural and singular forms
    def prepare_regex(word):
        # This is a simple way to handle plurals; it may need more sophisticated patterns based on your specific use case
        if word.endswith('y'):
            # City, cities
            return f"{word[:-1]}[ie]s"
        elif word.endswith('s'):
            # Class, classes
            return f"{word}es"
        else:
            return f"{word}s?"

    # Split the pattern by slashes and parentheses to handle the complex rules
    found_keywords = []
    # Handle slash-separated "OR" groups requiring one or more matches
    slash_groups = keyword_pattern.split('/')
    for group in slash_groups:
        # Extract words within parentheses as optional variations
        parenthesized_words = re.findall(r'\((.*?)\)', group)
        if parenthesized_words:
            for word in parenthesized_words:
                regex = re.compile(prepare_regex(word), re.IGNORECASE)
                if regex.search(text):
                    found_keywords.append(word)
        else:
            # No parentheses, directly add regex for potential plurals
            words = group.split()
            for word in words:
                regex = re.compile(prepare_regex(word), re.IGNORECASE)
                if regex.search(text):
                    found_keywords.append(word)

    return found_keywords if found_keywords else None


########## added stop words list to above function #############

stopwords = set(["the", "and", "to", "of", "in", "a", "is", "that", "for", "on", "it", "with", "as", "this", "by", "are", "or", "from"])

import re

def match_keywords(text, keyword_pattern, stopwords):
    def prepare_regex(word):
        if word in stopwords:
            return None  # Return None if the word is a stopword
        if word.endswith('y'):
            return f"{word[:-1]}[ie]s"
        elif word.endswith('s'):
            return f"{word}es"
        else:
            return f"{word}s?"

    found_keywords = []
    slash_groups = keyword_pattern.split('/')
    for group in slash_groups:
        parenthesized_words = re.findall(r'\((.*?)\)', group)
        if parenthesized_words:
            for word in parenthesized_words:
                regex_pattern = prepare_regex(word)
                if regex_pattern:
                    regex = re.compile(regex_pattern, re.IGNORECASE)
                    if regex.search(text):
                        found_keywords.append(word)
        else:
            words = group.split()
            for word in words:
                regex_pattern = prepare_regex(word)
                if regex_pattern:
                    regex = re.compile(regex_pattern, re.IGNORECASE)
                    if regex.search(text):
                        found_keywords.append(word)

    return found_keywords if found_keywords else None

----------- Updated Categorization Dictionary ------------

mapping_rules = {

'Caring Responsibilities': {'Level 1': {'description': 'Bring children to appointments',
   'keywords': '(Children) (childcare) (child)/ (appointment) (office)'},
  'Level 2': {'description': 'Identify support available locally',
   'keywords': 'Identify support'},
  'Level 3': {'description': 'Identify nurseries offering funded childcare',
   'keywords': '(Identify) / (nurseries)(funded childcare)'},
  'Level 4': {'description': 'Plan a care timetable',
   'keywords': '(Care timetable) (timetable for care)'}},
 
 'Finance': {'Level 1': {'description': 'Make a budget ',
   'keywords': 'Budget'},
  'Level 2': {'description': 'Explore debt management options',
   'keywords': 'Debt management'},
  'Level 3': {'description': 'Complete debt management course on iWorks',
   'keywords': 'Debt management/iworks/course '}},
 
 'Photo ID': {'Level 1': {'description': 'Apply for photo ID (NB - various types, passport, driving licence, citizen card, etc.)',
   'keywords': '(Passport) (Driving Licence) (Citizen Card) (photo ID) (photo)'}},
 
 'Criminal Record': {'Level 2': {'description': 'Identify skill and qualifications gaps',
   'keywords': '(Skill gaps) (qualification gaps)'},
  'Level 3': {'description': 'Practice interview skills and how to talk to an employer about criminal convictions',
   'keywords': '(Criminal) (criminal record) (convictions)'},
  'Level 4': {'description': 'Speak to Probation Officer',
   'keywords': 'Probation officer'}},
 
 'Housing': {'Level 1': {'description': 'Meet with Housing Officer to discuss support available',
   'keywords': 'Housing officer'},
  'Level 2': {'description': 'Contact housing association',
   'keywords': 'Housing association'},
  'Level 3': {'description': "Contact Citizen's Advice Bureau",
   'keywords': "(Citizen's Advice) (CAB) (Citizens Advice)"}},
 
 'Physical Capability': {'Level 1': {'description': 'Speak to GP',
   'keywords': '(Doctor) (GP)'},
  'Level 2': {'description': 'Obtain a fit note',
   'keywords': '(Fit note) (sick note) (fit for work)'},
  'Level 3': {'description': 'Identify benefits of increasing Physical activity',
   'keywords': 'Physical/activity/benefits '},
  'Level 4': {'description': 'Identify suitable pathways to employment',
   'keywords': 'Pathways to employment'},
  'Level 5': {'description': 'Identify specialist intervention services relating to physical activity',
   'keywords': 'Physical activity/services '}},
 
 'Digital Skills': {'Level 1': {'description': 'Complete a digital audit',
   'keywords': 'Digital audit'},
  'Level 2': {'description': 'Apply for VOXI', 'keywords': 'VOXI'},
  'Level 3': {'description': 'Complete iworks digital skills sessions',
   'keywords': '(iWorks) /(digital) (digital skills) '},
  'Level 4': {'description': 'Look at attending a college course',
   'keywords': '(College) (course) (digital college)'}},
 
 'Mental Wellbeing': {'Level 1': {'description': 'Complete a mental wellbeing assessment',
   'keywords': '(Mental wellbeing assessment) (wellbeing assessment)'},
  'Level 2': {'description': 'Attend an internal wellbeing workshop',
   'keywords': 'wellbeing/workshop '},
  'Level 3': {'description': 'Attend a 121 with the wellbeing officer',
   'keywords': 'Wellbeing officer'}},
 
 'Communication Skills': {'Level 1': {'description': 'Identify immediate support available to develop your understanding of English (E.g. family)',
   'keywords': 'Understanding/english '},
  'Level 2': {'description': 'Identify ESOL courses available',
   'keywords': 'ESOL course'},
  'Level 3': {'description': 'Attend an ESOL course',
   'keywords': 'Attend/ESOL  '},
  'Level 4': {'description': 'Complete role play exercises with people known to you to develop questioning techniques',
   'keywords': 'Role play/questioning techniques '},
  'Level 5': {'description': 'Attend an interview skills workshop',
   'keywords': 'Attend/interview/session/workshop '}},
 
 'Learning Capability': {'Level 1': {'description': 'Identifying areas for improving reading and writing with iWorks',
   'keywords': 'Reading/writing/iworks '},
  'Level 2': {'description': 'Identifying areas for improving reading and writing within local community',
   'keywords': 'Reading and writing/local/community '}},
 
 'Qualifications': {'Level 1': {'description': 'Provide evidence of qualifications',
   'keywords': 'Evidence/qualifications '},
  'Level 2': {'description': 'Identify qualifications needed to fill gaps',
   'keywords': 'Identify/qualifications  '},
  'Level 3': {'description': "Identify qualifications that could be gained via iWork's",
   'keywords': 'Qualifications/iworks '}},
 
 'Literacy and Numeracy': {'Level 1': {'description': 'Attend a numeracy course (External)',
   'keywords': '(Numeracy course) (numeracy session)'},
  'Level 2': {'description': 'Attend the journey to employment workshop',
   'keywords': 'journey to employment'}},
 
 'Attending Job Interviews': {'Level 1': {'description': 'Research the role being applied for',
   'keywords': 'Research/role '},
  'Level 2': {'description': 'Attend a group session on interview preparation',
   'keywords': 'Attend/group/session/interview '},
  'Level 4': {'description': 'Complete a mock interview with an Advisor',
   'keywords': '(Mock interview) (practice interview)'}},
 
 'Completing CV and Job Applications': {'Level 1': {'description': 'Gather work and education history',
   'keywords': 'Education/work/history '},
  'Level 2': {'description': 'Use iworks to build a CV/curriculum vitae',
   'keywords': '(iWorks) / (CV) (curriculum vitae)/ (create) / (build)'},
  'Level 3': {'description': 'Use iWorks CV checker to assess the quality of your CV',
   'keywords': '(iWorks) / (CV) (curriculum vitae)/ (check)'},
  'Level 4': {'description': 'Create a CV tailored to the role you are applying for',
   'keywords': 'CV/Tailored '},
  'Level 5': {'description': 'Attend a group session on CV building',
   'keywords': '(Session) / (CV) (curriculum vitae)'}},
 
 'Job Search': {'Level 1': {'description': 'Sign up for job search websites',
   'keywords': '(Job search) (job websites) (job sites)'},
  'Level 2': {'description': 'Use the job search function in iWorks to shortlist roles to apply for',
   'keywords': 'job search/iworks '},
  'Level 3': {'description': 'Attend internal job fair at the Restart site',
   'keywords': 'Job fair'},
  'Level 4': {'description': 'Use computers at Restart office to apply for jobs',
   'keywords': 'Apply/jobs  '},
  'Level 5': {'description': 'Create multiple CVs relevant to the sectors being applied for',
   'keywords': '(Multiple) / (CV) (CVs) (curriculum vitae)'}},
 
 'Transport': {'Level 1': {'description': 'Plan travel routes for attending appointments',
   'keywords': '(Plan) /(travel) (routes) '},
  'Level 2': {'description': 'Bring evidence of travel costs to appointment to claim expenses',
   'keywords': 'Travel/travel costs/expenses/travel expenses/costs '},
  'Level 3': {'description': 'Plan travel routes for attending job interviews/work locations',
   'keywords': 'Plan/travel/interviews/work '}},
 
 'Confidence': {'Level 1': {'description': 'Attend a confidence building session',
   'keywords': 'Confidence building session'},
  'Level 2': {'description': 'Complete confidence building sessions on iWorks',
   'keywords': 'Confidence building/iworks '}},
 
 'Motivation': {'Level 1': {'description': 'Complete iWorks motivational sessions',
   'keywords': 'iworks/motivational session '}}
   
   }

---------------- corrected and updated dictionary -------------------

mapping_rules = {

'Caring Responsibilities': {'Level 1': {'description': 'Bring children to appointments',
   'keywords': '(Children) (childcare) (child)/ (appointment) (office)'},
  'Level 2': {'description': 'Identify support available locally',
   'keywords': '(Identify support)'},
  'Level 3': {'description': 'Identify nurseries offering funded childcare',
   'keywords': '(Identify) / (nurseries)(funded childcare)'},
  'Level 4': {'description': 'Plan a care timetable',
   'keywords': '(Care timetable) (timetable for care)'}},
 
 'Finance': {'Level 1': {'description': 'Make a budget ',
   'keywords': '(Budget)'},
  'Level 2': {'description': 'Explore debt management options',
   'keywords': '(Debt management)'},
  'Level 3': {'description': 'Complete debt management course on iWorks',
   'keywords': 'Debt management/iworks/course '}},
 
 'Photo ID': {'Level 1': {'description': 'Apply for photo ID (NB - various types, passport, driving licence, citizen card, etc.)',
   'keywords': '(Passport) (Driving Licence) (Citizen Card) (photo ID) (photo)'}},
 
 'Criminal Record': {'Level 2': {'description': 'Identify skill and qualifications gaps',
   'keywords': '(Skill gaps) (qualification gaps)'},
  'Level 3': {'description': 'Practice interview skills and how to talk to an employer about criminal convictions',
   'keywords': '(Criminal) (criminal record) (convictions)'},
  'Level 4': {'description': 'Speak to Probation Officer',
   'keywords': '(Probation officer)'}},
 
 'Housing': {'Level 1': {'description': 'Meet with Housing Officer to discuss support available',
   'keywords': '(Housing officer)'},
  'Level 2': {'description': 'Contact housing association',
   'keywords': '(Housing association)'},
  'Level 3': {'description': "Contact Citizen's Advice Bureau",
   'keywords': "(Citizen's Advice) (CAB) (Citizens Advice)"}},
 
 'Physical Capability': {'Level 1': {'description': 'Speak to GP',
   'keywords': '(Doctor) (GP)'},
  'Level 2': {'description': 'Obtain a fit note',
   'keywords': '(Fit note) (sick note) (fit for work)'},
  'Level 3': {'description': 'Identify benefits of increasing Physical activity',
   'keywords': 'Physical/activity/benefits '},
  'Level 4': {'description': 'Identify suitable pathways to employment',
   'keywords': '(Pathways to employment)'},
  'Level 5': {'description': 'Identify specialist intervention services relating to physical activity',
   'keywords': 'Physical activity/services '}},
 
 'Digital Skills': {'Level 1': {'description': 'Complete a digital audit',
   'keywords': '(Digital audit)'},
  'Level 2': {'description': 'Apply for VOXI', 
   'keywords': '(VOXI)'},
  'Level 3': {'description': 'Complete iworks digital skills sessions',
   'keywords': '(iWorks) /(digital) (digital skills) '},
  'Level 4': {'description': 'Look at attending a college course',
   'keywords': '(College) (course) (digital college)'}},
 
 'Mental Wellbeing': {'Level 1': {'description': 'Complete a mental wellbeing assessment',
   'keywords': '(Mental wellbeing assessment) (wellbeing assessment)'},
  'Level 2': {'description': 'Attend an internal wellbeing workshop',
   'keywords': 'wellbeing/workshop '},
  'Level 3': {'description': 'Attend a 121 with the wellbeing officer',
   'keywords': '(Wellbeing officer)'}},
 
 'Communication Skills': {'Level 1': {'description': 'Identify immediate support available to develop your understanding of English (E.g. family)',
   'keywords': 'Understanding/english '},
  'Level 2': {'description': 'Identify ESOL courses available',
   'keywords': '(ESOL course)'},
  'Level 3': {'description': 'Attend an ESOL course',
   'keywords': 'Attend/ESOL  '},
  'Level 4': {'description': 'Complete role play exercises with people known to you to develop questioning techniques',
   'keywords': 'Role play/questioning techniques '},
  'Level 5': {'description': 'Attend an interview skills workshop',
   'keywords': 'Attend/interview/session/workshop '}},
 
 'Learning Capability': {'Level 1': {'description': 'Identifying areas for improving reading and writing with iWorks',
   'keywords': 'Reading/writing/iworks '},
  'Level 2': {'description': 'Identifying areas for improving reading and writing within local community',
   'keywords': 'Reading and writing/local/community '}},
 
 'Qualifications': {'Level 1': {'description': 'Provide evidence of qualifications',
   'keywords': 'Evidence/qualifications '},
  'Level 2': {'description': 'Identify qualifications needed to fill gaps',
   'keywords': 'Identify/qualifications  '},
  'Level 3': {'description': "Identify qualifications that could be gained via iWork's",
   'keywords': 'Qualifications/iworks '}},
 
 'Literacy and Numeracy': {'Level 1': {'description': 'Attend a numeracy course (External)',
   'keywords': '(Numeracy course) (numeracy session)'},
  'Level 2': {'description': 'Attend the journey to employment workshop',
   'keywords': '(journey to employment)'}},
 
 'Attending Job Interviews': {'Level 1': {'description': 'Research the role being applied for',
   'keywords': 'Research/role '},
  'Level 2': {'description': 'Attend a group session on interview preparation',
   'keywords': 'Attend/group/session/interview '},
  'Level 4': {'description': 'Complete a mock interview with an Advisor',
   'keywords': '(Mock interview) (practice interview)'}},
 
 'Completing CV and Job Applications': {'Level 1': {'description': 'Gather work and education history',
   'keywords': 'Education/work/history '},
  'Level 2': {'description': 'Use iworks to build a CV/curriculum vitae',
   'keywords': '(iWorks) / (CV) (curriculum vitae)/ (create) / (build)'},
  'Level 3': {'description': 'Use iWorks CV checker to assess the quality of your CV',
   'keywords': '(iWorks) / (CV) (curriculum vitae)/ (check)'},
  'Level 4': {'description': 'Create a CV tailored to the role you are applying for',
   'keywords': 'CV/Tailored '},
  'Level 5': {'description': 'Attend a group session on CV building',
   'keywords': '(Session) / (CV) (curriculum vitae)'}},
 
 'Job Search': {'Level 1': {'description': 'Sign up for job search websites',
   'keywords': '(Job search) (job websites) (job sites)'},
  'Level 2': {'description': 'Use the job search function in iWorks to shortlist roles to apply for',
   'keywords': 'job search/iworks '},
  'Level 3': {'description': 'Attend internal job fair at the Restart site',
   'keywords': '(Job fair)'},
  'Level 4': {'description': 'Use computers at Restart office to apply for jobs',
   'keywords': 'Apply/jobs  '},
  'Level 5': {'description': 'Create multiple CVs relevant to the sectors being applied for',
   'keywords': '(Multiple) / (CV) (CVs) (curriculum vitae)'}},
 
 'Transport': {'Level 1': {'description': 'Plan travel routes for attending appointments',
   'keywords': '(Plan) /(travel) (routes) '},
  'Level 2': {'description': 'Bring evidence of travel costs to appointment to claim expenses',
   'keywords': 'Travel/costs(cost)/expenses'},
  'Level 3': {'description': 'Plan travel routes for attending job interviews/work locations',
   'keywords': 'Plan/travel/(interviews)(interview)/work '}},
 
 'Confidence': {'Level 1': {'description': 'Attend a confidence building session',
   'keywords': '(Confidence building session)'},
  'Level 2': {'description': 'Complete confidence building sessions on iWorks',
   'keywords': 'Confidence building/iworks '}},
 
 'Motivation': {'Level 1': {'description': 'Complete iWorks motivational sessions',
   'keywords': 'iworks/motivational session '}}
   
   }

--------------------- updated match keywords function to handle new dictionary and case sensitive and plural ----------

import re

def match_keywords(text, keyword_pattern, stopwords):
    def prepare_regex(words):
        # Handling both plural and singular forms by making the last 's' optional
        words = re.sub(r'\b(\w+?)\b', r'\1s?', words)
        # Escaping special characters in words
        words = re.escape(words)
        # Replace spaces with regex that allows optional extra words in between
        words = words.replace(r'\ ', r'\s+')
        return words

    # Initialize found keywords list
    found_keywords = []

    # Normalize text for case insensitive matching
    text = text.lower()

    # Handle each group divided by '/'
    for group in keyword_pattern.split('/'):
        # Extract keywords inside parentheses and handle them with regex
        group_keywords = re.findall(r'\((.*?)\)', group)
        if group_keywords:
            # Create regex pattern for each keyword considering stopwords
            for keywords in group_keywords:
                if keywords.lower() not in stopwords:
                    regex = re.compile(prepare_regex(keywords), re.IGNORECASE)
                    if regex.search(text):
                        found_keywords.append(keywords)
        else:
            # If no parentheses, treat the whole group as one keyword
            if group.strip().lower() not in stopwords:
                regex = re.compile(prepare_regex(group.strip()), re.IGNORECASE)
                if regex.search(text):
                    found_keywords.append(group.strip())

    return found_keywords if found_keywords else None

stopwords = set(["the", "and", "to", "of", "in", "a", "is", "that", "for", "on", "it", "with", "as", "this", "by", "are", "or", "from"])

# Example text and keyword pattern from your mapping rules
text = "John needs to plan travel routes for his interviews and work locations."
keyword_pattern = "(Plan) /(travel) (routes)"

# Call match_keywords function
matched_keywords = match_keywords(text, keyword_pattern, stopwords)
print("Matched Keywords:", matched_keywords)

 The keyword mapping rules in your mapping_rules dictionary, along with how the match_keywords function is designed to handle them, are crucial for ensuring accurate categorization based on textual content. Let's break down both the structure of the rules and the logic of the keyword matching function.

Understanding of Keyword Mapping Rules
Your mapping_rules dictionary organizes information under various "Areas of Focus," each containing several "Levels" that describe specific actions or considerations. Each level has:

Description: A brief description of the action or focus at that level.
Keywords: A set of keywords designed to match related content in your textual data. These keywords are formatted in a way that indicates how they should be matched, using parentheses () and slashes /.
Examples from your data:

Caring Responsibilities: Level 1

Description: "Bring children to appointments"
Keywords: "(Children) (childcare) (child)/ (appointment) (office)"
This means the text should contain either "children," "childcare," or "child" AND "appointment" or "office."
Physical Capability: Level 3

Description: "Identify benefits of increasing Physical activity"
Keywords: "Physical/activity/benefits"
This indicates a need for the presence of "Physical," "activity," and "benefits" in any order.
Keyword Matching Function Logic
The match_keywords function processes these keyword patterns to match text data effectively. Here’s how it works with the key aspects being addressed:

Regular Expressions: It uses Python’s re module to create and apply regular expressions based on the keyword patterns.

Plural and Singular Forms: By appending s? to the keywords (where applicable), the regex pattern accounts for both plural and singular forms. This regex adjustment is done in the prepare_regex function which modifies the keywords before they are compiled into regex patterns.

Case Insensitivity: It performs case-insensitive matching (re.IGNORECASE) to ensure that variations in capitalization do not affect the matching process.

Handling of Parentheses and Slashes:

Parentheses (): Items within parentheses are treated as separate options within a group. The text should match any of the options listed within the parentheses.
Slashes /: These are used to denote essential words that must all appear in the text, though not necessarily adjacent to each other or in the order listed.
Stopwords Filtering: Common words like "the," "and," "to," etc., are filtered out to prevent them from triggering matches that are not meaningful. This filtering occurs before the regex matching checks, thus ensuring that these common words do not skew the matching results.

Applying the Matching Function
When match_keywords is invoked, it processes each group of keywords:

It constructs a regex pattern for each keyword or group of keywords (considering stopwords and plural/singular forms).
It then checks the provided text against these patterns.
If a match is found based on the conditions set out by the keyword patterns (accounting for necessary groups and optionals), these keywords are added to the list of found keywords.

############# updated match keywords function to capture correct logic ############

import re

def match_keywords(text, keyword_pattern, stopwords):
    # Normalize text for case-insensitive matching
    text = text.lower()

    # Initialize found keywords list and split pattern on '/'
    found_keywords = []
    patterns = keyword_pattern.split('/')

    # Handle each pattern part
    matches = []
    for pattern in patterns:
        # Extract keywords inside parentheses
        group_keywords = re.findall(r'\((.*?)\)', pattern)
        group_matches = []
        for keyword in group_keywords:
            if keyword.lower() not in stopwords:
                # Prepare keyword to account for plural forms simply
                keyword_regex = r'\b' + re.escape(keyword) + r's?\b'
                if re.search(keyword_regex, text, re.IGNORECASE):
                    group_matches.append(keyword)
        # Consider the whole pattern if no parentheses and not a stopword
        if not group_keywords:
            keyword = pattern.strip()
            if keyword.lower() not in stopwords:
                keyword_regex = r'\b' + re.escape(keyword) + r's?\b'
                if re.search(keyword_regex, text, re.IGNORECASE):
                    group_matches.append(keyword)
        
        # Collect matches from current group
        if group_matches:
            matches.append(group_matches)

    # Check if enough groups have matches
    if len(matches) >= 2:
        for match_group in matches:
            found_keywords.extend(match_group)

    return found_keywords if found_keywords else None

# Define your stopwords
stopwords = set(["the", "and", "to", "of", "in", "a", "is", "that", "for", "on", "it", "with", "as", "this", "by", "are", "or", "from"])

########## dictionary error #############
mapping_rules = {

'Caring Responsibilities': 
 {'Level 1': {'description': 'Bring children to appointments',
   'keywords': '(Children) (childcare) (child)/ (appointment) (office)'},
  'Level 2': {'description': 'Identify support available locally',
   'keywords': '(Identify/support)'},
  'Level 3': {'description': 'Identify nurseries offering funded childcare',
   'keywords': '(Identify) / (nurseries)(funded childcare)'},
  'Level 4': {'description': 'Plan a care timetable',
   'keywords': '(Care timetable) (timetable for care)'}},
 
 'Finance': 
  {'Level 1': {'description': 'Make a budget ',
   'keywords': '(Budget)'},
  'Level 2': {'description': 'Explore debt management options',
   'keywords': '(Debt)'},
  'Level 3': {'description': 'Complete debt management course on iWorks',
   'keywords': 'Debt management/iworks/course '}},
 
 'Photo ID': 
  {'Level 1': {'description': 'Apply for photo ID (NB - various types, passport, driving licence, citizen card, etc.)',
   'keywords': '(Passport) (Driving Licence) (Citizen Card) (photo ID) (photo)'}},
 
 'Criminal Record': 
  {'Level 1': {'description': 'Identify impact on job goals and how these can be overcome',
   'keywords': '(Criminal) (criminal record) (convictions) / (goals)'},
  {'Level 2': {'description': 'Identify skill and qualifications gaps',
   'keywords': '(Skill gaps) (qualification gaps) / (criminal)(conviction)'},
  'Level 3': {'description': 'Practice interview skills and how to talk to an employer about criminal convictions',
   'keywords': '(Criminal) (criminal record) (convictions)'},
  'Level 4': {'description': 'Speak to Probation Officer',
   'keywords': '(Probation officer)'}},
   
 'Housing': 
  {'Level 1': {'description': 'Meet with Housing Officer to discuss support available',
   'keywords': '(Housing officer)'},
  'Level 2': {'description': 'Contact housing association',
   'keywords': '(Housing association)'},
  'Level 3': {'description': "Contact Citizen's Advice Bureau",
   'keywords': "(Citizen's Advice) (CAB) (Citizens Advice)"}},
 
 'Physical Capability': 
  {'Level 1': {'description': 'Speak to GP',
   'keywords': '(Doctor) (GP)'},
  'Level 2': {'description': 'Obtain a fit note',
   'keywords': '(Fit note) (sick note) (fit for work)'},
  'Level 3': {'description': 'Identify benefits of increasing Physical activity',
   'keywords': 'Physical/activity/benefits '},
  'Level 4': {'description': 'Identify suitable pathways to employment',
   'keywords': '(Pathways to employment)'},
  'Level 5': {'description': 'Identify specialist intervention services relating to physical activity',
   'keywords': 'Physical/activity/services '}},
 
 'Digital Skills': 
  {'Level 1': {'description': 'Complete a digital audit',
   'keywords': 'Digital/audit'},
  'Level 2': {'description': 'Apply for VOXI', 
   'keywords': '(VOXI)(voxi)'},
  'Level 3': {'description': 'Complete iworks digital skills sessions',
   'keywords': '(iWorks) /(digital) (digital skills) '},
  'Level 4': {'description': 'Look at attending a college course',
   'keywords': '(College) (course) (digital college)'}},
 
 'Mental Wellbeing': 
  {'Level 1': {'description': 'Complete a mental wellbeing assessment',
   'keywords': '(Mental wellbeing assessment) (wellbeing assessment)(assessment)/(mental health)'},
  'Level 2': {'description': 'Attend an internal wellbeing workshop',
   'keywords': '(wellbeing) (well being) (anxiety) (depression)(mental health) / (workshop) (session)'},
  'Level 3': {'description': 'Attend a 121 with the wellbeing officer',
   'keywords': '(Wellbeing officer) / (anxiety) (depression) (mental health)'}},
 
 'Communication Skills': 
  {'Level 1': {'description': 'Identify immediate support available to develop your understanding of English (E.g. family)',
   'keywords': '((Understanding) (Understand) / (english) '},
  'Level 2': {'description': 'Identify ESOL courses available',
   'keywords': 'Attend/ESOL'},
  'Level 4': {'description': 'Complete role play exercises with people known to you to develop questioning techniques',
   'keywords': 'Role play/questioning techniques '},
  'Level 5': {'description': 'Attend an interview skills workshop',
   'keywords': 'Attend/interview/session/workshop '}},
 
 'Learning Capability': 
  {'Level 1': {'description': 'Identifying areas for improving reading and writing with iWorks',
   'keywords': 'Reading/writing/iworks '},
  'Level 2': {'description': 'Identifying areas for improving reading and writing within local community',
   'keywords': 'Reading and writing/local/community '}},

 'Qualifications': 
  {'Level 1': {'description': 'Provide evidence of qualifications',
   'keywords': 'Evidence/qualifications'},
  'Level 2': {'description': 'Identify qualifications needed to fill gaps',
   'keywords': 'Identify/qualifications'},
  'Level 3': {'description': "Identify qualifications that could be gained via iWork's",
   'keywords': 'Qualification / iworks'}},

 'Qualifications Progression': 
  {'Level 1': {'description': 'Identify qualifications gaps',
   'keywords': 'gaps/qualifications '},
  'Level 2': {'description': 'Apply for courses with the relevant qualifications',
   'keywords': '(Apply) /(courses) (CSCS) (SIA) (food) (hygiene) (teaching)'},
  'Level 3': {'description': "Update CV with new qualifications gained",
   'keywords': '(Update) / (CV) (curriculum vitae) / (qualifications)'}},
 
 'Literacy and Numeracy': 
  {'Level 1': {'description': 'Attend a numeracy course (External)',
   'keywords': 'Numeracy'},
  'Level 2': {'description': 'Attend the journey to employment workshop',
   'keywords': 'journey/employment'}},
 
 'Attending Job Interviews': 
  {'Level 1': {'description': 'Research the role being applied for',
   'keywords': 'Research/role '},
  'Level 2': {'description': 'Attend a group session on interview preparation',
   'keywords': 'Attend/group/session/interview '},
   'Level 3': {'description': 'Use iWorks Interview 360 tool to prepare for a job interview',
   'keywords': 'Interview/360'},
  'Level 4': {'description': 'Complete a mock interview with an Advisor',
   'keywords': '(Mock)(practice) / interview'}},
 
 'Completing CV and Job Applications': 
  {'Level 1': {'description': 'Gather work and education history',
   'keywords': '(Education)(work)/history '},
  'Level 2': {'description': 'Use iworks to build a CV/curriculum vitae',
   'keywords': '(iWorks) / (CV) (curriculum vitae)/ (create) / (build)'},
  'Level 3': {'description': 'Use iWorks CV checker to assess the quality of your CV',
   'keywords': '(iWorks) / (CV) (curriculum vitae)/ (check)'},
  'Level 4': {'description': 'Create a CV tailored to the role you are applying for',
   'keywords': 'CV/Tailored '},
  'Level 5': {'description': 'Attend a group session on CV building',
   'keywords': '(Session) / (CV) (curriculum vitae)'}},
 
 'Job Search': 
  {'Level 1': {'description': 'Sign up for job search websites',
   'keywords': '(Job search) (job websites) (job sites)'},
  'Level 2': {'description': 'Use the job search function in iWorks to shortlist roles to apply for',
   'keywords': 'job search/iworks '},
  'Level 3': {'description': 'Attend internal job fair at the Restart site',
   'keywords': '(Job fair)'},
  'Level 4': {'description': 'Apply for Jobs',
   'keywords': '(Apply) (applied) / (jobs) (roles)'},
  'Level 5': {'description': 'Create multiple CVs relevant to the sectors being applied for',
   'keywords': '(Multiple) / (CV) (CVs) (curriculum vitae)'}},
 
 'Transport': 
  {'Level 1': {'description': 'Plan travel routes',
   'keywords': '(Plan) /(travel) (routes) '},
  'Level 2': {'description': 'Bring evidence of travel costs to appointment to claim expenses',
   'keywords': 'Travel/travel costs/expenses/travel expenses/costs'},
  'Level 3': {'description': 'Plan travel routes for attending job interviews/work locations',
   'keywords': 'Plan/travel/(interviews)(interview)/work '}},
 
 'Confidence': 
  {'Level 1': {'description': 'Attend a confidence building session',
   'keywords': '(Confidence)(building)/session'},
  'Level 2': {'description': 'Complete confidence building sessions on iWorks',
   'keywords': 'Confidence/iworks '}},
 
 'Motivation': 
  {'Level 1': {'description': 'Complete iWorks motivational sessions',
   'keywords': 'iworks/motivational session '}}
   
   }
